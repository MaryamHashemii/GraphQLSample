// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.zarinpal.test

import com.apollographql.apollo.api.Mutation
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.`internal`.InputFieldMarshaller
import com.apollographql.apollo.api.`internal`.OperationRequestBodyComposer
import com.apollographql.apollo.api.`internal`.QueryDocumentMinifier
import com.apollographql.apollo.api.`internal`.ResponseFieldMapper
import com.apollographql.apollo.api.`internal`.ResponseFieldMarshaller
import com.apollographql.apollo.api.`internal`.ResponseReader
import com.apollographql.apollo.api.`internal`.SimpleOperationResponseParser
import com.apollographql.apollo.api.`internal`.Throws
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.Map
import kotlin.jvm.Transient
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
public data class PostLoginMutation(
  public val email: String,
  public val pass: String
) : Mutation<PostLoginMutation.Data, PostLoginMutation.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    public override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["email"] = this@PostLoginMutation.email
      this["pass"] = this@PostLoginMutation.pass
    }

    public override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
      writer.writeString("email", this@PostLoginMutation.email)
      writer.writeString("pass", this@PostLoginMutation.pass)
    }
  }

  public override fun operationId(): String = OPERATION_ID

  public override fun queryDocument(): String = QUERY_DOCUMENT

  public override fun wrapData(`data`: Data?): Data? = data

  public override fun variables(): Operation.Variables = variables

  public override fun name(): OperationName = OPERATION_NAME

  public override fun responseFieldMapper(): ResponseFieldMapper<Data> =
      ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  public override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  public override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters):
      Response<Data> = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  public override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  public override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  public override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  public override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  public override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  public data class PostLogin(
    public val __typename: String = "Token",
    public val tkn: String
  ) {
    public fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@PostLogin.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@PostLogin.tkn)
    }

    public companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("tkn", "tkn", null, false, null)
          )

      public operator fun invoke(reader: ResponseReader): PostLogin = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val tkn = readString(RESPONSE_FIELDS[1])!!
        PostLogin(
          __typename = __typename,
          tkn = tkn
        )
      }

      @Suppress("FunctionName")
      public fun Mapper(): ResponseFieldMapper<PostLogin> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  public data class Data(
    public val postLogin: PostLogin
  ) : Operation.Data {
    public override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke {
        writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.postLogin.marshaller())
    }

    public companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("postLogin", "postLogin", mapOf<String, Any>(
            "email" to mapOf<String, Any>(
              "kind" to "Variable",
              "variableName" to "email"),
            "pass" to mapOf<String, Any>(
              "kind" to "Variable",
              "variableName" to "pass")), false, null)
          )

      public operator fun invoke(reader: ResponseReader): Data = reader.run {
        val postLogin = readObject<PostLogin>(RESPONSE_FIELDS[0]) { reader ->
          PostLogin(reader)
        }!!
        Data(
          postLogin = postLogin
        )
      }

      @Suppress("FunctionName")
      public fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "f7394a41cd1327a485296f782d1cdf89612d9489df30cf70458d43417cfe8a41"

    public val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |mutation postLogin(${'$'}email: String!, ${'$'}pass: String!) {
          |  postLogin(email: ${'$'}email, pass: ${'$'}pass) {
          |    __typename
          |    tkn
          |  }
          |}
          """.trimMargin()
        )

    public val OPERATION_NAME: OperationName = object : OperationName {
      public override fun name(): String = "postLogin"
    }
  }
}
